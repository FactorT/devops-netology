FROM archlinux:latest

RUN pacman -Suy --noconfirm && \
    pacman -S ponysay

ENTRYPOINT ["/usr/bin/ponysay"]
CMD ["Hey, netology]





FROM ubuntu:latest

RUN apt-get update && \
    apt-get install -y wget && \
    apt-get install -y gnupg && \
    echo "deb https://pkg.jenkins.io/debian-stable binary/" >> /etc/apt/sources.list && \
    wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -  && \
    apt-get update && \
    apt-get install -y jenkins && \
    apt search openjdk && \
    apt install openjdk-11-jdk  -y

ENTRYPOINT ["/etc/init.d/jenkins"]
CMD [" start”]


ENTRYPOINT ["/usr/bin/ponysay"]
CMD ["Hey, netology”]
 
RUN apt-get install -y ponysay

ENTRYPOINT ["/etc/init.d/jenkins","start"]
RUN "/etc/init.d/jenkins start"

nano dockerfile
sudo docker build -t factort/jenkins_on_ubuntu:v.3 .
sudo docker run -it --name jenkins_on_ubuntu --publish 8080:8080 factort/jenkins_on_ubuntu:v.3
sudo docker run -p 8080:8080 -p 50000:50000 -v /vagrant/home:/var/jenkins_home factort/jenkins_on_ubuntu:v.3
sudo docker exec -it jenkins_on_ubuntu bash
sudo docker stop jenkins_on_ubuntu && sudo docker rm jenkins_on_ubuntu

curl http://localhost:8080


sudo docker logs jenkins_on_ubuntu

sudo docker exec jenkins_on_ubuntu tail -f /var/log/jenkins/jenkins.log


==============================================================================================================
==============================================================================================================
==============================================================================================================

FROM openjdk:8-jdk

RUN apt-get update && apt-get install -y git curl && rm -rf /var/lib/apt/lists/* && \
    apt update && \
    apt-get search openjdk && \
    apt-get install openjdk-11-jdk  -y

ARG user=jenkins
ARG group=jenkins
ARG uid=1000
ARG gid=1000
ARG http_port=8080
ARG agent_port=50000

ENV JENKINS_HOME /var/jenkins_home
ENV JENKINS_SLAVE_AGENT_PORT ${agent_port}

# Jenkins is run with user `jenkins`, uid = 1000
# If you bind mount a volume from the host or a data container, 
# ensure you use the same uid
RUN groupadd -g ${gid} ${group} \
    && useradd -d "$JENKINS_HOME" -u ${uid} -g ${gid} -m -s /bin/bash ${user}

# Jenkins home directory is a volume, so configuration and build history 
# can be persisted and survive image upgrades
VOLUME /var/jenkins_home

# `/usr/share/jenkins/ref/` contains all reference configuration we want 
# to set on a fresh new installation. Use it to bundle additional plugins 
# or config file with your custom jenkins Docker image.
RUN mkdir -p /usr/share/jenkins/ref/init.groovy.d

ENV TINI_VERSION 0.14.0
ENV TINI_SHA 6c41ec7d33e857d4779f14d9c74924cab0c7973485d2972419a3b7c7620ff5fd

# Use tini as subreaper in Docker container to adopt zombie processes 
RUN curl -fsSL https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini-static-amd64 -o /bin/tini && chmod +x /bin/tini \
  && echo "$TINI_SHA  /bin/tini" | sha256sum -c -

COPY init.groovy /usr/share/jenkins/ref/init.groovy.d/tcp-slave-agent-port.groovy

# jenkins version being bundled in this docker image
ARG JENKINS_VERSION
ENV JENKINS_VERSION ${JENKINS_VERSION:-2.60.3}

# jenkins.war checksum, download will be validated using it
ARG JENKINS_SHA=2d71b8f87c8417f9303a73d52901a59678ee6c0eefcf7325efed6035ff39372a

# Can be used to customize where jenkins.war get downloaded from
ARG JENKINS_URL=https://repo.jenkins-ci.org/public/org/jenkins-ci/main/jenkins-war/${JENKINS_VERSION}/jenkins-war-${JENKINS_VERSION}.war

# could use ADD but this one does not check Last-Modified header neither does it allow to control checksum 
# see https://github.com/docker/docker/issues/8331
RUN curl -fsSL ${JENKINS_URL} -o /usr/share/jenkins/jenkins.war \
  && echo "${JENKINS_SHA}  /usr/share/jenkins/jenkins.war" | sha256sum -c -

ENV JENKINS_UC https://updates.jenkins.io
ENV JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental
RUN chown -R ${user} "$JENKINS_HOME" /usr/share/jenkins/ref

# for main web interface:
EXPOSE ${http_port}

# will be used by attached slave agents:
EXPOSE ${agent_port}

ENV COPY_REFERENCE_FILE_LOG $JENKINS_HOME/copy_reference_file.log

USER ${user}

COPY jenkins-support /usr/local/bin/jenkins-support
COPY jenkins.sh /usr/local/bin/jenkins.sh
RUN sudo chmod u+rwx /usr/local/bin/jenkins.sh
ENTRYPOINT ["/bin/tini", "--", "/usr/local/bin/jenkins.sh"]